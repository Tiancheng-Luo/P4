#!/bin/bash

#  This file is part of P4
# 
#  Copyright (C) 1996-2016  J.C. Art√©s, C. Herssens, P. De Maesschalck,
#                           F. Dumortier, J. Llibre, O. Saleta
# 
#  P4 is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Lesser General Public License as published
#  by the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
# 
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
# 
#  You should have received a copy of the GNU Lesser General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e



# Functions
function install_home {
    printf "\n=== Installing P4 in $HOME/p4...\n"
    mv p4 $HOME/
    INSTALLDIR=$HOME/p4
    ln -s $INSTALLDIR/sumtables $INSTALLDIR/sum_tables
    whiptail --title "Create P4_DIR variable" --msgbox "Compilation and installation is finished. Now, it is advisable that you add the following lines to the end of the configuration file of your preferred shell (probably $HOME/.${SHELL:5}rc):

    P4_DIR=$INSTALLDIR
    PATH=$INSTALLDIR/bin:\$PATH
    export P4_DIR PATH

    In case you don't know which shell you're using, open a terminal and execute this command:

    echo .\$(echo \$0)rc

    And edit that file." 20 80
    printf "Done.\n\n[Optional] add to the end of $HOME/.${SHELL:5}rc (or preferred shell configuration script):\n\nP4_DIR=$INSTALLDIR\nPATH=$INSTALLDIR/bin:\$PATH\nexport P4_DIR PATH\n"
}

function install_root {
    printf "\n=== Installing P4 in /usr/local/p4...\n"
    sudo mv p4 /usr/local
    INSTALLDIR=/usr/local/p4
    sudo ln -s $INSTALLDIR/sumtables $INSTALLDIR/sum_tables
    sudo ln -s $INSTALLDIR/bin/p4 /usr/local/bin/p4
    whiptail --title "Create P4_DIR variable" --msgbox "Compilation and installation is finished. Now, it is advisable that you add the following lines to the end of the configuration file of your preferred shell (probably $HOME/.${SHELL:5}rc):

    P4_DIR=$INSTALLDIR
    export P4_DIR

    In case you don't know which shell you're using, open a terminal and execute this command:

    echo .\$(echo \$0)rc

    And edit that file." 20 80
    printf "Done.\n\n[Optional] add to the end of $HOME/.${SHELL:5}rc (or preferred shell configuration script):\n\nP4_DIR=$INSTALLDIR\nPATH=$INSTALLDIR/bin:\$PATH\nexport P4_DIR PATH\n"
}

# Error messages
QT5_ERROR="[Error]
Some Qt5 modules were not found in the system.
Install them using the proper method for your distribution, e.g.:

    - Debian-based (Debian/Ubuntu/Mint): sudo apt-get install qt5-default qt5-qmake
    - Fedora-based (Fedora/Kokora/Arquetype): sudo dnf install qt5*-devel --allowerasing
    - Arch-based (Archlinux/Antergos): sudo pacman -S qt5-base"
PKGCONFIG_ERROR="[Error]
The command pkg-config is needed in order to check for other needed packages.
Install it using the proper method for your distribution, e.g.:

    - Debian-based (Debian/Ubuntu/Mint): sudo apt-get install pkg-config
    - Fedora-based (Fedora/Kokora/Arquetype): sudo dnf install pkgconfig
    - Arch-based (Archlinux/Angergos): sudo pacman -S pkg-config"
GCC_ERROR="[Error]
Some GCC libraries were not found in the system.
Install them using the proper method for your distribution, e.g.:
    - Debian-based (Debian/Ubuntu/Mint): sudo apt-get install gcc g++
    - Fedora-based (Fedora/Kokora/Arquetype): sudo dnf group install 'Development Tools'
    - Arch-based (Archlinux/Antergos): sudo pacman -S gcc"
LDCONFIG_ERROR="[Error]
Cannot execute command ldconfig, make sure it is available and you have permission to use this command."
MPFR_ERROR="[Error]
Multiprecision mpfr library was not found in the system. Install it using the proper method for your distribution, e.g.:
- Debian-based (Debian/Ubuntu/Mint): sudo apt-get install libmpfr-dev
- Fedora-based (Fedora/Kokora/Arquetype): sudo dnf install mpfr-devel
- Arch-based (Archlinux/Antergos): sudo pacman -S mpfr"
QMAKE_ERROR="[Error]
$QMAKE is not a valid command for building a Qt application. Possible causes are that Qt5 is not properly installed:
- Debian-based (Debian/Ubuntu/Mint): sudo apt install qt5-default qt5-qmake
- Fedora-based (Fedora/Kokora/Arquetype): sudo dnf install qt5*-devel --allowerasing
- Arch-based (Archlinux/Antergos): sudo pacman -S qt5-base

or that your Linux distribution uses a different name for the qmake executable (e.g. in Fedora-based distributions, it is called qmake-qt5). In this case, run

env QMAKE=/path/to/qmake ./compile_install_linux --verbose

(where /path/to/qmake should be replaced by the actual path or command of qmake in your system)."





###############################################
# START OF SCRIPT

# check input variables
if [ "$1" = "--verbose" ] || [ "$2" = "--verbose" ] || [ "$3" = "--verbose" ]; then
    VERBOSE=true
else
    VERBOSE=false
fi
if [ "$1" = "--uninstall" ] || [ "$2" = "--uninstall" ] || [ "$3" = "--uninstall" ]; then
    ONLYUNINSTALL=true
else
    ONLYUNINSTALL=false
fi
if [ "$1" = "--debug" ] || [ "$2" = "--debug" ] || [ "$3" = "--debug" ]; then
    COMPILE_DEBUG="CONFIG+=debug"
else
    COMPILE_DEBUG=
fi

# Title
if [ $ONLYUNINSTALL = false ]; then
    printf "\n\t========================================\n\t|| COMPILATION AND INSTALLATION OF P4 ||\n\t========================================\n"
    # Welcome screen
    if ! whiptail --title "Compilation and installation of P4" --yesno --yes-button "Continue" --no-button "Exit" "Welcome to the Linux compilation and  installation script for the program P4.

    Optional arguments:

    --verbose : more VERBOSE output (in order to see possible errors during compilation)
    --uninstall : to only UNINSTALL P4
    --debug : to compile with DEBUGGING symbols

    These options can be used together in any given order.

    Select <Continue> to go on with the installation or <Exit> to quit." 15 100; then
        printf "=== Finished\n"
        exit 1
    fi
else
    printf "\n\t========================\n\t|| UNINSTALLER FOR P4 ||\n\t========================\n"
fi

# Uninstalling
printf "\n=== Checking for older P4 versions...\n"
UNINSTALLED=false
INSTALLEDHOME=false
INSTALLEDROOT=false
if [ -d $HOME/p4 ]; then
    INSTALLEDHOME=true
    if whiptail --title "Uninstalling older versions" --yesno "Older P4 install found in $HOME/p4.
Do you want to remove it?" 20 60; then
        UNINSTALLED=true
        INSTALLEDHOME=false
        rm -rf $HOME/p4
        if [ -f $HOME/.local/share/applications/p4.desktop ]; then
            rm -f $HOME/.local/share/applications/p4.desktop
        fi
    fi
fi
if [ -d /usr/local/p4 ]; then
    INSTALLEDROOT=true
    if whiptail --title "Uninstalling older versions" --yesno "Older P4 install found in /usr/local/p4.
Do you want to remove it?" 20 60; then
        UNINSTALLED=true
        INSTALLEDROOT=false
        sudo rm -rf /usr/local/p4
        sudo rm -f /usr/local/bin/p4
        if [ -f /usr/share/applications/p4.desktop ]; then
            sudo rm -f /usr/share/applications/p4.desktop
        fi
    fi
fi
if [ -d /usr/opt/p4 ]; then
    if whiptail --title "Uninstalling older versions" --yesno "Older P4 install found in /usr/opt/p4.
Do you want to remove it?" 20 60; then
        UNINSTALLED=true
        sudo rm -rf /usr/opt/p4
        sudo rm -f /usr/bin/p4
        if [ -f /usr/share/applications/p4.desktop ]; then
            sudo rm -f /usr/share/applications/p4.desktop
        fi
    fi
fi
if [ $UNINSTALLED = false ]; then
    echo "- No older P4 version removed."
fi
if [ $UNINSTALLED = true ]; then
    if [ -d $HOME/.config/P4 ]; then
        if whiptail --title "Uninstalling older versions" --yesno --defaultno "Do you want to remove P4 configuration?" 20 60; then
            if test -d $HOME/.config/P4; then
                rm -rf $HOME/.config/P4
            fi
        fi
    fi
fi
echo "Done."

# After uninstalling, check if we want to continue
if [ $ONLYUNINSTALL = true ]; then
    exit 0;
fi

# Check for dependencies
printf "\n=== Checking for dependencies...\n"
if (pkg-config --version >/dev/null 2>&1); then
    if (pkg-config --exists Qt5Core && pkg-config --exists Qt5Gui && pkg-config --exists Qt5Widgets && pkg-config --exists Qt5PrintSupport); then
        echo "- Qt5Core, Qt5Gui, Qt5Widgets and Qt5PrintSupport found in the system."
    else
        whiptail --title "Missing Qt5 modules" --msgbox "$QT5_ERROR" 15 100
        echo "$QT5_ERROR"
        exit 1
    fi
else
    whiptail --title "Missing pkg-config" --msgbox "$PKGCONFIG_ERROR" 15 80
    echo "$PKGCONFIG_ERROR"
    exit 1
fi
if (ldconfig --version >/dev/null 2>&1); then
    if (ldconfig -p | grep libstdc++ >/dev/null && ldconfig -p | grep libgcc_s >/dev/null && ldconfig -p | grep libc >/dev/null); then
        echo "- GCC libraries found in the system."
    else
        whiptail --title "Missing GCC libraries" --msgbox "$GCC_ERROR" 15 80
        echo "$GCC_ERROR"
        exit 1
    fi
else
    printf "- [Warning] the command ldconfig could not be executed, will try as super user..."
    if (sudo ldconfig -p | grep libstdc++ >/dev/null && sudo ldconfig -p | grep libgcc_s >/dev/null && sudo ldconfig -p | grep libc >/dev/null); then
        printf " Success.\n"
        echo "- GCC libraries found in the system."
    else
        printf "\n"
        echo "$LDCONFIG_ERROR"
        exit 1
    fi
fi
if [ -f /usr/include/mpfr.h ]; then
    echo "- Multiprecision Real library mpfr found"
else
    whiptail --title "Missing mpfr library" --msgbox "$MPFR_ERROR" 20 80
    echo "$MPFR_ERROR"
    exit 1
fi
echo "Done."

# Compile
printf "\n=== Compiling P4...\n"
whiptail --infobox --title "Compiling P4..." "Compiling P4, this could take several minutes!" 20 60
echo "- Cleaning old builds..."
if [ $VERBOSE = false ]; then
    OUT=/dev/null
    ERR=/dev/null
else
    OUT=/dev/stdout
    ERR=/dev/stderr
fi
rm -rf build p4 $DEST
echo "- Running qmake..."
if [ -z ${QMAKE+x} ]; then
    QMAKE=qmake
fi

if ! $QMAKE $COMPILE_DEBUG -r P4.pro >$OUT 2>$ERR; then
    whiptail --title "qmake error" --msgbox "$QMAKE_ERROR" 20 80
    printf "\n$QMAKE_ERROR"
    exit 1
fi
# Use multicore make for faster compilation
CPUCNT=$(grep -c ^processor /proc/cpuinfo)
echo "- Compiling... Will use $CPUCNT jobs for make. This will take a moment..."
make -j$CPUCNT >$OUT #2>$ERR
if [ -f src-mpl/p4.m ]; then
    if whiptail --title "Recompile Maple scripts" --yesno --defaultno "Do you want to recompile Maple scripts from src-mpl?
If your Maple version is Maple 2015, this is not necessary." 20 60; then
        echo "- Recompiling Maple scripts..."
        cd src-mpl
        make -f MakeTexMaple clean >$OUT 2>$ERR
        cd ..
        make -C src-mpl p4.m >$OUT 2>$ERR
    fi
else
    echo "- Compiling Maple scripts..."
    make -C src-mpl p4.m >$OUT 2>$ERR
fi
make install >$OUT 2>$ERR
echo "Done."

# Install
if [ $INSTALLEDROOT = true ]; then
    if whiptail --title "Install P4?" --yesno "Do you want to install P4 in $HOME/p4?" 20 60; then
        install_home
    fi
elif [ $INSTALLEDHOME = true ]; then
    if whiptail --title "Install P4?" --yesno "Do you want to install P4 in /usr/local/p4?" 20 60; then
        install_root
    fi
else
    if whiptail --title "Install P4?" --yesno "Do you want to install P4 in your system?" 20 60; then
        if whiptail --title "Install P4" --yesno --yes-button "User" --no-button  "Root" --defaultno "Where do you want to install P4?

            User: $HOME/p4
            Root: /usr/local/p4" 20 60; then
            install_home
        else
            install_root
        fi
    fi
fi
printf "\n=== Finished.\n"