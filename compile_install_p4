#!/bin/bash

#  This file is part of P4
# 
#  Copyright (C) 1996-2017  J.C. Art√©s, P. De Maesschalck, F. Dumortier,
#                           C. Herssens, J. Llibre, O. Saleta, J. Torregrosa
# 
#  P4 is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Lesser General Public License as published
#  by the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
# 
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
# 
#  You should have received a copy of the GNU Lesser General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e


# Check OS
platform='unknown'
unamestr=`uname`
if [[ "$unamestr" == 'Linux' ]]; then
    platform='linux'
elif [[ "$unamestr" == 'Darwin' ]]; then
    platform='darwin'
else
    echo "- OS not recognised, aborting."
    exit 1
fi

# Check qmake command
if [[ -z ${QMAKE+x} ]]; then
    QMAKE='qmake'
fi


# Functions
function install_home {
    printf "\n=== Installing P4 in $HOME/p4...\n"
    mv p4 $HOME/
    installdir=$HOME/p4
    ln -s $installdir/sumtables $installdir/sum_tables
    whiptail --title "Create P4_DIR variable" --msgbox "Compilation and installation is finished. Now, it is advisable that you add the following lines to the end of the configuration file of your preferred shell (probably $HOME/.${SHELL:5}rc):

    P4_DIR=$installdir
    PATH=$installdir/bin:\$PATH
    export P4_DIR PATH

    In case you don't know which shell you're using, open a terminal and execute this command:

    echo .\$(echo \$0)rc

    And edit that file." 20 80
    printf "Done.\n\n[Optional] add to the end of $HOME/.${SHELL:5}rc (or preferred shell configuration script):\n\nP4_DIR=$installdir\nPATH=$installdir/bin:\$PATH\nexport P4_DIR PATH\n"
}

function install_root {
    printf "\n=== Installing P4 in /usr/local/p4...\n"
    sudo mv p4 /usr/local
    installdir=/usr/local/p4
    sudo ln -s $installdir/sumtables $installdir/sum_tables
    sudo ln -s $installdir/bin/p4 /usr/local/bin/p4
    whiptail --title "Create P4_DIR variable" --msgbox "Compilation and installation is finished. Now, it is advisable that you add the following lines to the end of the configuration file of your preferred shell (probably $HOME/.${SHELL:5}rc):

    P4_DIR=$installdir
    export P4_DIR

    In case you don't know which shell you're using, open a terminal and execute this command:

    echo .\$(echo \$0)rc

    And edit that file." 20 80
    printf "Done.\n\n[Optional] add to the end of $HOME/.${SHELL:5}rc (or preferred shell configuration script):\n\nP4_DIR=$installdir\nPATH=$installdir/bin:\$PATH\nexport P4_DIR PATH\n"
}

function mpfr_test {
    printf "#include <mpfr.h>\nint main(void) {\nreturn 0;\n}" > testmpfr.cpp
    if [ "$platform" == 'linux' ]; then
        if (! g++ testmpfr.cpp 1>/dev/null 2>&1); then
            echo "== mpfr.h not found"
            echo "$mpfr_error"
            rm testmpfr.cpp
            exit 1
        fi
    elif [ "$platform" == 'darwin' ]; then
        if (! clang testmpfr.cpp 1>/dev/null 2>&1); then
            echo "== mpfr.h not found"
            echo "$mpfr_error"
            rm testmpfr.cpp
            exit 1
        fi
    fi
    rm testmpfr.cpp
}


# Error messages
if [ "$platform" == 'linux' ]; then
    qt5_error="[Error]
    Some Qt5 modules were not found in the system.
    Install them using the proper method for your distribution, e.g.:
        - Debian-based (Debian/Ubuntu/Mint): sudo apt-get install qt5-default qt5-qmake
        - Fedora-based (Fedora/Kokora/Arquetype): sudo dnf install qt5*-devel --allowerasing
        - Arch-based (Archlinux/Antergos): sudo pacman -S qt5-base"
    pkgconfig_error="[Error]
    The command pkg-config is required in order to check for other needed packages.
    Install it using the proper method for your distribution, e.g.:
        - Debian-based (Debian/Ubuntu/Mint): sudo apt-get install pkg-config
        - Fedora-based (Fedora/Kokora/Arquetype): sudo dnf install pkgconfig
        - Arch-based (Archlinux/Angergos): sudo pacman -S pkg-config"
    compiler_error="[Error]
    GCC is required to compile P4, and some libraries were not found in the system.
    Install them using the proper method for your distribution, e.g.:
        - Debian-based (Debian/Ubuntu/Mint): sudo apt-get install gcc g++
        - Fedora-based (Fedora/Kokora/Arquetype): sudo dnf group install 'Development Tools'
        - Arch-based (Archlinux/Antergos): sudo pacman -S gcc"
    ldconfig_error="[Error]
    Cannot execute command ldconfig, make sure it is available and you have permission to use this command."
    mpfr_error="[Error]
    Multiprecision mpfr library was not found in the system. Install it using the proper method for your distribution, e.g.:
        - Debian-based (Debian/Ubuntu/Mint): sudo apt-get install libmpfr-dev
        - Fedora-based (Fedora/Kokora/Arquetype): sudo dnf install mpfr-devel
        - Arch-based (Archlinux/Antergos): sudo pacman -S mpfr"
    qmake_error="[Error]
    $QMAKE is not a valid command for building a Qt application. Possible causes are that Qt5 is not properly installed:
        - Debian-based (Debian/Ubuntu/Mint): sudo apt install qt5-default qt5-qmake
        - Fedora-based (Fedora/Kokora/Arquetype): sudo dnf install qt5*-devel --allowerasing
        - Arch-based (Archlinux/Antergos): sudo pacman -S qt5-base
    or that your Linux distribution uses a different name for the qmake executable (e.g. in Fedora-based distributions, it is called qmake-qt5). In this case, run
        env QMAKE=/path/to/qmake ./compile_install_p4 --verbose
    (where /path/to/qmake should be replaced by the actual path of qmake in your system)."
elif [ "$platform" == 'darwin' ]; then
    qt5_error="[Error]
    Some Qt5 modules were not found in the system.
    Install or compile Qt following instructions from http://doc.qt.io/qt-5/osx.html."
    pkgconfig_error="[Error]
    pkg-config is needed in order to check for other packages.
    Install it using this command in a terminal: brew install pkg-config."
    compiler_error="[Error]
    Clang is required to compile P4, and it was not found in the system.
    Install Xcode and then install the command-line tools using: xcode-select --install in a terminal."
    mpfr_error="[Error]
    Multiprecision mpfr library was not found in the system. You can install it using this command in a terminal: brew install mpfr"
    qmake_error="[Error]
    $QMAKE is not a valid command for building a Qt application. A possible cause is that Qt is not properly installed: in this case, install Qt following the instructions of http://doc.qt.io/qt-5/osx.html.
    Another cause can be that the binary was not found. In this case, run the script as:
        env QMAKE=/path/to/qmake ./compile_install_p4 --verbose
    (where /path/to/qmake should be replaced by the actual path of qmake in your system)."
fi


# Check input variables
if [ "$1" = "--verbose" ] || [ "$2" = "--verbose" ] || [ "$3" = "--verbose" ]; then
    verbose=true
else
    verbose=false
fi
if [ "$1" = "--uninstall" ] || [ "$2" = "--uninstall" ] || [ "$3" = "--uninstall" ]; then
    only_uninstall=true
else
    only_uninstall=false
fi
if [ "$1" = "--debug" ] || [ "$2" = "--debug" ] || [ "$3" = "--debug" ]; then
    compile_debug="CONFIG+=debug"
else
    compile_debug=
fi


# Title
if [ $only_uninstall = false ]; then
    printf "\n\t========================================\n\t|| COMPILATION AND INSTALLATION OF P4 ||\n\t========================================\n"
    # Welcome screen
    printf "\nWelcome to the P4 compilation and installation script.\n
Optional arguments:
    --verbose: more verbose output (in order to see possible errors during compilation)
    --uninstall: to uninstall P4
    --debug: to compile with debugging symbols\n
These options can be used together in any given order.
Do you want to continue with the execution of the script? [Y/n] "
    read input_variable
    if (echo "$input_variable" | grep -iq "^n"); then
        printf "=== Finished\n"
        exit 1
    fi
else
    printf "\n\t========================\n\t|| UNINSTALLER FOR P4 ||\n\t========================\n"
fi

# Uninstalling
printf "\n=== Checking for older P4 versions...\n"
uninstalled=false
installed_home=false
installed_root=false
if [[ -d $HOME/p4 ]]; then
    installed_home=true
    printf "= P4 installation found in $HOME/p4. Do you want to remove it? [Y/n] "
    read input_variable
    if (echo "$input_variable" | grep -iq "^n"); then
        echo "- Not removing P4 in $HOME/p4"
    else
        uninstalled=true
        installed_home=false
        rm -rf $HOME/p4
        if [[ "$platform" == 'linux' ]]; then
            if [[ -f $HOME/.local/share/applications/p4.desktop ]]; then
                rm -f $HOME/.local/share/applications/p4.desktop
            fi
        fi
    fi
fi
if [[ -d /usr/local/p4 ]]; then
    installed_root=true
    printf "= P4 installation found in /usr/local/p4. Do you want to remove it? [Y/n] "
    read input_variable
    if (echo "$input_variable" | grep -iq "^n"); then
        echo "- Not removing P4 in /usr/local/p4"
    else
        uninstalled=true
        installed_root=false
        sudo rm -rf /usr/local/p4
        sudo rm -f /usr/local/bin/p4
        if [[ "$platform" == 'linux' ]]; then
            if [[ -f /usr/share/applications/p4.desktop ]]; then
                sudo rm -f /usr/share/applications/p4.desktop
            fi
        fi
    fi
fi

if [[ $uninstalled = false ]]; then
    echo "- No older P4 version removed."
fi
if [ $uninstalled = true ]; then
    if [[ -d $HOME/.config/P4 ]]; then
        printf "= Do you want to remove P4 configuration? [y/N] "
        read input_variable
        if (echo "$input_variable" | grep -iq "^y"); then
            rm -rf $HOME/.config/P4
        fi
    fi
fi
echo "Done."

# After uninstalling, check if we want to continue
if [ $only_uninstall = true ]; then
    exit 0;
fi

# Check for dependencies
printf "\n=== Checking for dependencies...\n"
if (pkg-config --version >/dev/null 2>&1); then
    if (pkg-config --exists Qt5Core && pkg-config --exists Qt5Gui && pkg-config --exists Qt5Widgets && pkg-config --exists Qt5PrintSupport); then
        echo "- Qt5Core, Qt5Gui, Qt5Widgets and Qt5PrintSupport found in the system."
    else
        echo "== Missing Qt5 modules"
        echo "$qt5_error"
        exit 1
    fi
else
    echo "== Missing pkg-config"
    echo "$pkgconfig_error"
    exit 1
fi
exit 1
if (ldconfig --version >/dev/null 2>&1); then
    if (ldconfig -p | grep libstdc++ >/dev/null && ldconfig -p | grep libgcc_s >/dev/null && ldconfig -p | grep libc >/dev/null); then
        echo "- GCC libraries found in the system."
    else
        whiptail --title "Missing GCC libraries" --msgbox "$compiler_error" 15 80
        echo "$compiler_error"
        exit 1
    fi
else
    printf -- "- [Warning] the command ldconfig could not be executed, will try as super user..."
    if (sudo ldconfig -p | grep libstdc++ >/dev/null && sudo ldconfig -p | grep libgcc_s >/dev/null && sudo ldconfig -p | grep libc >/dev/null); then
        printf " Success.\n"
        echo "- GCC libraries found in the system."
    else
        printf "\n"
        echo "$ldconfig_error"
        exit 1
    fi
fi
if [ -f /usr/include/mpfr.h ]; then
    echo "- Multiprecision Real library mpfr found"
else
    whiptail --title "Missing mpfr library" --msgbox "$mpfr_error" 20 80
    echo "$mpfr_error"
    exit 1
fi
echo "Done."

# Compile
printf "\n=== Compiling P4...\n"
whiptail --infobox --title "Compiling P4..." "Compiling P4, this could take several minutes!" 20 60
echo "- Cleaning old builds..."
if [ $verbose = false ]; then
    OUT=/dev/null
    ERR=/dev/null
else
    OUT=/dev/stdout
    ERR=/dev/stderr
fi
rm -rf build p4 $DEST
echo "- Running qmake..."
if (! $QMAKE $compile_debug -r P4.pro >$OUT 2>$ERR); then
    whiptail --title "qmake error" --msgbox "$qmake_error" 20 80
    printf "\n$qmake_error"
    exit 1
fi
# Use multicore make for faster compilation
echo "- Cleaning previous compilations..."
make clean >$OUT 2>$ERR
CPUCNT=$(grep -c ^processor /proc/cpuinfo)
echo "- Compiling... Will use $CPUCNT jobs for make. This will take a moment..."
make -j$CPUCNT >$OUT #2>$ERR
if [ -f src-mpl/p4.m ]; then
    if whiptail --title "Recompile Maple scripts" --yesno --defaultno "Do you want to recompile Maple scripts from src-mpl?
If your Maple version is Maple 2015, this is not necessary." 20 60; then
        echo "- Recompiling Maple scripts..."
        cd src-mpl
        make -f MakeTexMaple clean >$OUT 2>$ERR
        cd ..
        make -C src-mpl p4.m >$OUT 2>$ERR
    fi
else
    echo "- Compiling Maple scripts..."
    make -C src-mpl p4.m >$OUT 2>$ERR
fi
make install >$OUT 2>$ERR
echo "Done."

# Install
if [ $installed_root = true ]; then
    if whiptail --title "Install P4?" --yesno "Do you want to install P4 in $HOME/p4?" 20 60; then
        install_home
    fi
elif [ $installed_home = true ]; then
    if whiptail --title "Install P4?" --yesno "Do you want to install P4 in /usr/local/p4?" 20 60; then
        install_root
    fi
else
    if whiptail --title "Install P4?" --yesno "Do you want to install P4 in your system?" 20 60; then
        if whiptail --title "Install P4" --yesno --yes-button "User" --no-button  "Root" --defaultno "Where do you want to install P4?

            User: $HOME/p4
            Root: /usr/local/p4" 20 60; then
            install_home
        else
            install_root
        fi
    fi
fi
printf "\n=== Finished.\n"