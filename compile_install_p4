#!/bin/bash

#  This file is part of P4
# 
#  Copyright (C) 1996-2017  J.C. Art√©s, P. De Maesschalck, F. Dumortier,
#                           C. Herssens, J. Llibre, O. Saleta, J. Torregrosa
# 
#  P4 is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Lesser General Public License as published
#  by the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
# 
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
# 
#  You should have received a copy of the GNU Lesser General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e

clear


# Check OS
platform='unknown'
unamestr=`uname`
if [[ "$unamestr" == 'Linux' ]]; then
    platform='linux'
elif [[ "$unamestr" == 'Darwin' ]]; then
    platform='darwin'
else
    echo "- This script only works in Linux and macOS systems, aborting."
    exit 1
fi

# Check qmake command
if [[ -z ${QMAKE+x} ]]; then
    QMAKE='qmake'
fi


# Functions
function print_title {
    if [[ "$1" == 'install' ]]; then
        echo ""
        echo "    ______    ___     _              _           _  _"
        echo "    | ___ \  /   |   (_)            | |         | || |"
        echo "    | |_/ / / /| |    _  _ __   ___ | |_   __ _ | || |  ___  _ __"
        echo "    |  __/ / /_| |   | || '_ \ / __|| __| / _\` || || | / _ \| '__|"
        echo "    | |    \___  |   | || | | |\__ \| |_ | (_| || || ||  __/| |"
        echo "    \_|        |_/   |_||_| |_||___/ \__| \__,_||_||_| \___||_|"
        echo ""
    elif [[ "$1" == 'uninstall' ]]; then
        echo ""
        echo "    ______    ___                   _              _           _  _"
        echo "    | ___ \  /   |                 (_)            | |         | || |"
        echo "    | |_/ / / /| |    _   _  _ __   _  _ __   ___ | |_   __ _ | || |  ___  _ __"
        echo "    |  __/ / /_| |   | | | || '_ \ | || '_ \ / __|| __| / _\` || || | / _ \| '__|"
        echo "    | |    \___  |   | |_| || | | || || | | |\__ \| |_ | (_| || || ||  __/| |"
        echo "    \_|        |_/    \__,_||_| |_||_||_| |_||___/ \__| \__,_||_||_| \___||_|"
        echo ""
    fi
}

function read_variable {
    if [[ "$1" == 'yes' ]]; then
        printf -- "$2 [Y/n] "
    elif [[ "$1" == 'no' ]]; then
        printf -- "$2 [y/N] "
    elif [[ "$1" == 'both' ]]; then
        printf -- "$2 [y/n] "
    fi
    while read -t 0 notused; do
        read input
    done
    read input_variable
}

function install_home {
    echo ""
    echo "=== Installing P4 in $HOME/p4..."
    mv p4 $HOME/
    installdir=$HOME/p4
    ln -s $installdir/sumtables $installdir/sum_tables
    echo "- Compilation and installation is finished. Now, it is advisable that you"
    echo "  add the following lines to the end of the configuration file of your"
    echo "  preferred shell (probably $HOME/.${SHELL:5}rc):"
    echo "    P4_DIR=$installdir"
    echo "    PATH=$installdir/bin:\$PATH\nexport P4_DIR PATH"
    echo "- In case you don't know which shell you're using, open a terminal and"
    echo "  execute this command:"
    echo "    echo .\$(echo \$0)rc"
    echo "  And edit that file."
    echo ""
}

function install_root {
    echo ""
    echo "=== Installing P4 in /usr/local/p4..."
    sudo mv p4 /usr/local
    installdir=/usr/local/p4
    sudo ln -s $installdir/sumtables $installdir/sum_tables
    sudo ln -s $installdir/bin/p4 /usr/local/bin/p4
    echo "- Compilation and installation is finished. Now, it is advisable that you"
    echo "  add the following lines to the end of the configuration file of your"
    echo "  preferred shell (probably $HOME/.${SHELL:5}rc):"
    echo "    P4_DIR=$installdir"
    echo "    export P4_DIR"
    echo "- In case you don't know which shell you're using, open a terminal and"
    echo "  execute this command:"
    echo "    echo .\$(echo \$0)rc"
    echo "  And edit that file."
    echo ""
}

function mpfr_test {
    if [[ "$1" != 'retry' ]]; then
        echo "- Looking for multiprecision library..."
    fi
    echo "#include <mpfr.h>" > testmpfr.cpp
    echo "int main(void) {" >> testmpfr.cpp
    echo "    return 0;"    >> testmpfr.cpp
    echo "}"                >> testmpfr.cpp
    if [[ "$platform" == 'linux' ]]; then
        if (! g++ testmpfr.cpp 1>/dev/null 2>&1); then
            error_mpfr
            rm testmpfr.cpp
            exit 1
        fi
    elif [[ "$platform" == 'darwin' ]]; then
        if (! clang testmpfr.cpp 1>/dev/null 2>&1); then
            if (! g++ testmpfr.cpp 1>/dev/null 2>&1); then
                error_mpfr
                rm testmpfr.cpp
                if [[ "$1" == 'retry' ]]; then
                    exit 1
                else
                    install_mpfr
                    mpfr_test 'retry'
                    return
                fi
            fi
        fi
    fi
    echo "[Success]"
    rm testmpfr.cpp
    rm a.out
}

if [[ "$platform" == 'darwin' ]]; then
    function install_brew {
        if (! command -v brew >/dev/null 2>&1); then
            sh macOS-install-tools/homebrew.sh
        fi
    }

    function install_qt {
        echo ""
        echo "    - This script can automatically install Qt in your system using"
        echo "      Homebrew."
        read_variable 'yes' '      Do you want to proceed?'
        if (echo "$input_variable" | grep -iq "^n"); then
            echo "    - Not installing Qt, exiting installer."
            exit 1
        else
            install_brew
            sh macOS-install-tools/qt.sh
        fi
    }

    function install_mpfr {
        echo ""
        echo "    - This script can automatically install the MPFR library using"
        echo "      Homebrew."
        read_variable 'yes' 'Do you want to proceed?'
        if (echo "$input_variable" | grep -iq "^n"); then
            echo "    - Not installing MPFR, exiting installer."
            exit 1
        else
            install_brew
            sh macOS-install-tools/mpfr.sh
        fi
    }
fi

# Error messages

function error_maple {
    echo "[Error] The Maple command line 'maple' was not found in the system path."
    echo "It is needed by P4 to perform many computations, so P4 will not really"
    echo "work without it. Make sure you specify the correct path in the P4 settings."
    echo ""
}

function error_mpfr {
    echo "[Error] Multiprecision mpfr library was not found in the system."
    if [[ "$platform" == 'linux' ]]; then
        echo "Install it using the proper method for your distribution, e.g.:"
        echo "    - Debian-based: sudo apt-get install libmpfr-dev"
        echo "    - Fedora-based: sudo dnf install mpfr-devel"
        echo "    - Arch-based: sudo pacman -S mpfr"
    elif [[ "$platform" == 'darwin' ]]; then
        echo "You can install it using this command in a terminal: brew install mpfr"
    fi
    echo ""
}

function error_qmake {
echo "[Error] Error during execution of $QMAKE."
    if [[ "$platform" == 'linux' ]]; then
        echo "A possible cause is that Qt5 is not properly installed:"
        echo "    - Debian-based: sudo apt install qt5-default qt5-qmake"
        echo "    - Fedora-based: sudo dnf install qt5*-devel --allowerasing"
        echo "    - Arch-based: sudo pacman -S qt5-base"
        echo "Another cause could be that your Linux distribution uses a different name"
        echo "for the qmake executable (e.g. in Fedora-based distributions, it is called"
        echo "qmake-qt5). In this case, run"
        echo "    env QMAKE=/path/to/qmake ./compile_install_p4 --verbose"
        echo "(where /path/to/qmake should be replaced by the actual path of qmake in"
        echo "your system)."
    elif [[ "$platform" == 'darwin' ]]; then
        echo "A possible cause is that Qt is not properly installed. In this case,"
        echo "install Qt following the instructions of http://doc.qt.io/qt-5/osx.html or"
        echo "using the Homebrew package manager (brew install qt)."
        echo "Another cause could be that the binary was not found. In this case, run"
        echo "the script as:"
        echo "    env QMAKE=/path/to/qmake ./compile_install_p4 --verbose"
        echo "(where /path/to/qmake should be replaced by the actual path of qmake in"
        echo "your system)."
        echo "A third cause could be related to the macOS SDK. This means that Xcode is"
        echo "not properly installed. Install Xcode from the App Store, agree to the"
        echo "Terms of Usage, and install the Command Line Developer Tools."
    fi
    echo ""
}

function error_compiler {
    if [[ "$platform" == 'linux' ]]; then
        echo "[Error] GCC is required to compile P4, and some libraries were not found"
        echo "in the system."
        echo "Install them using the proper method for your distribution, e.g.:"
        echo "    - Debian-based (Debian/Ubuntu/Mint): sudo apt-get install gcc g++"
        echo "    - Fedora-based (Fedora/Kokora/Arquetype): sudo dnf group install 'Development Tools'"
        echo "    - Arch-based (Archlinux/Antergos): sudo pacman -S gcc"
    elif [[ "$platform" == 'darwin' ]]; then
        echo "[Error] Clang is required to compile P4, and it was not found in the system."
        echo "Install Xcode from the App Store, execute it to agree with the Terms of Use,"
        echo "and then install the command-line tools running the following in a terminal:"
        echo "    xcode-select --install"
    fi
}

if [[ "$platform" == 'linux' ]]; then
    function error_qtmodules {
        echo "[Error] Some Qt5 modules were not found in the system."
        echo "Install them using the proper method for your distribution, e.g.:"
        echo "    - Debian-based: sudo apt install qt5-default qt5-qmake"
        echo "    - Fedora-based: sudo dnf install qt5*-devel --allowerasing"
        echo "    - Arch-based: sudo pacman -S qt5-base"
        echo ""
    }

    function error_pkgconfig {
        echo "[Error] The command pkg-config is required in order to check for other"
        echo "needed packages."
        echo "Install it using the proper method for your distribution, e.g.:"
        echo "    - Debian-based: sudo apt-get install pkg-config"
        echo "    - Fedora-based: sudo dnf install pkgconfig"
        echo "    - Arch-based: sudo pacman -S pkg-config"
        echo ""
    }

    function error_ldconfig {
        echo "[Error] Cannot execute command ldconfig, make sure it is available and you"
        echo "have permission to use this command."
        echo ""
    }
fi



# Check input variables
if [ "$1" = "--verbose" ] || [ "$2" = "--verbose" ] || [ "$3" = "--verbose" ]; then
    verbose=true
else
    verbose=false
fi
if [ "$1" = "--uninstall" ] || [ "$2" = "--uninstall" ] || [ "$3" = "--uninstall" ]; then
    only_uninstall=true
else
    only_uninstall=false
fi
if [ "$1" = "--debug" ] || [ "$2" = "--debug" ] || [ "$3" = "--debug" ]; then
    compile_debug="CONFIG+=debug"
else
    compile_debug=
fi


# Title
if [[ $only_uninstall = false ]]; then
    print_title 'install'
    # Welcome screen
    echo ""
    echo "Welcome to the P4 compilation and installation script."
    echo ""
    echo "Optional arguments:"
    echo "    --verbose: verbose output in compilation"
    echo "    --uninstall: to uninstall an existing version of P4"
    echo "    --debug: to compile with debugging symbols"
    echo "These options can be used together in any given order."
    echo ""
    read_variable 'yes' 'Continue with the execution of the script?'
    if (echo "$input_variable" | grep -iq "^n"); then
        echo ""
        echo "=== Finished"
        echo ""
        exit 0
    fi
else
    print_title 'uninstall'
    echo ""
    echo "Welcome to the P4 uninstaller script."
    echo ""
    echo "You are about to uninstall P4 from your system. You will be asked for"
    echo "confirmation before completely removing P4."
    read_variable 'yes' 'Continue with the execution of the script?'
    if (echo "$input_variable" | grep -iq "^n"); then
        echo ""
        echo "=== Finished"
        echo ""
        exit 0
    fi
fi

# Uninstalling
echo ""
echo "=== Checking for older P4 versions..."
uninstalled=false
installed_home=false
installed_root=false
if [[ -d $HOME/p4 ]]; then
    installed_home=true
    read_variable 'yes' '- P4 installation found in $HOME/p4. Do you want to remove it?'
    if (echo "$input_variable" | grep -iq "^n"); then
        echo "- Not removing P4 in $HOME/p4."
    else
        uninstalled=true
        installed_home=false
        rm -rf $HOME/p4
        if [[ "$platform" == 'linux' ]]; then
            if [[ -f $HOME/.local/share/applications/p4.desktop ]]; then
                rm -f $HOME/.local/share/applications/p4.desktop
            fi
        fi
    fi
fi
if [[ -d /usr/local/p4 ]]; then
    installed_root=true
    read_variable 'yes' '- P4 installation found in /usr/local/p4. Do you want to remove it?'
    if (echo "$input_variable" | grep -iq "^n"); then
        echo "- Not removing P4 in /usr/local/p4."
    else
        uninstalled=true
        installed_root=false
        sudo rm -rf /usr/local/p4
        sudo rm -f /usr/local/bin/p4
        if [[ "$platform" == 'linux' ]]; then
            if [[ -f /usr/share/applications/p4.desktop ]]; then
                sudo rm -f /usr/share/applications/p4.desktop
            fi
        fi
    fi
fi

if [[ $uninstalled = false ]]; then
    echo "- No older P4 version removed."
fi
if [[ $uninstalled = true ]]; then
    if [[ -d $HOME/.config/P4 ]]; then
        read_variable 'no' '- Do you want to remove P4 configuration?'
        if (echo "$input_variable" | grep -iq "^y"); then
            rm -rf $HOME/.config/P4
        fi
    fi
fi


# After uninstalling, check if we want to continue
if [[ $only_uninstall = true ]]; then
    exit 0
fi

# Check for dependencies
echo ""
echo "=== Checking for dependencies..."
# qmake
echo "- Looking for qmake... "
if (command -v qmake >/dev/null 2>&1); then
    echo "[Success]"
else
    error_qmake
    if [[ "$platform" == 'linux' ]]; then
        exit 1
    elif [[ "$platform" == 'darwin' ]]; then
        install_qt
    fi
fi

if [[ "$platform" == 'linux' ]]; then
    # Qt modules
    echo "- Looking for pkg-config... "
    if (command -v pkg-config >/dev/null 2>&1); then
        echo "[Success]"
        echo "- Looking for Qt5 modules... "
        if (pkg-config --exists Qt5Core && pkg-config --exists Qt5Gui && pkg-config --exists Qt5Widgets && pkg-config --exists Qt5PrintSupport); then
            echo "[Success]"
        else
            error_qtmodules
            exit 1
        fi
    else
        error_pkgconfig
        exit 1
    fi
    # compiler libraries
    echo "- Looking for ldconfig..."
    if (command -v ldconfig >/dev/null 2>&1); then
        echo "[Success]"
        echo "- Looking for compiler libraries..."
        if (ldconfig -p | grep libstdc++ >/dev/null && ldconfig -p | grep libgcc_s >/dev/null && ldconfig -p | grep libc >/dev/null); then
            echo "[Success]"
        else
            error_compiler
            exit 1
        fi
    else
        echo "[Warning] ldconfig could not be executed, trying as super user..."
        if (sudo ldconfig -p | grep libstdc++ >/dev/null && sudo ldconfig -p | grep libgcc_s >/dev/null && sudo ldconfig -p | grep libc >/dev/null); then
            echo "[Success]"
        else
            error_ldconfig
            exit 1
        fi
    fi
fi

# multiprecision
mpfr_test

# maple
echo "- Looking for Maple..."
if (command -v maple >/dev/null 2>&1); then
    echo "[Success]"
else
    error_maple
fi




# Compile
echo ""
echo "=== Compiling P4..."

if [[ $verbose = false ]]; then
    OUT=/dev/null
else
    OUT=/dev/stdout
fi

echo "== Cleaning old builds..."
if (make distclean >$OUT); then
    echo "[Success]"
else
    echo "[Error] Check make error messages"
fi

echo "== Executing qmake..."
if (! $QMAKE $compile_debug -r P4.pro >$OUT); then
    error_qmake
    exit 1
else
    echo "[Success]"
fi

# Use multicore make for faster compilation
if [[ "$platform" == 'linux' ]]; then
    CPUCNT=$(grep -c ^processor /proc/cpuinfo)
elif [[ "$platform" == 'darwin' ]]; then
    CPUCNT=$(sysctl -a | grep ^machdep.cpu.thread_count: | sed 's/^.*: //')
fi

echo "== Compiling C++ code... "
echo "- Will use $CPUCNT jobs for make. This will take a moment..."
if (make -j$CPUCNT >$OUT); then
    echo "[Success]"
else
    echo "[Error] Check compiler error messages"
    exit 1
fi

echo "== Compiling Maple code... "
if [[ -f src-mpl/p4.m ]]; then
    echo "- Do you want to recompile Maple scripts from src-mpl?"
    read_variable 'no' '  If your Maple version is Maple 2015, this is not necessary.'
    if (echo "$input_variable" | grep -iq "^y"); then
        echo "- Recompiling Maple scripts..."
        cd src-mpl
        make -f MakeTexMaple clean >$OUT
        cd ..
        if (make -C src-mpl p4.m >$OUT); then
            echo "[Success]"
        else
            echo "[Error] Check compiler error messages"
            exit 1
        fi
    fi
else
    echo "- Compiling Maple scripts... "
    if (make -C src-mpl p4.m >$OUT); then
        echo "[Success]"
    else
        echo "[Error] Check compiler error messages"
        exit 1
    fi
fi


# make install (generate p4 directory in project root)
echo ""
echo "=== Generating P4 directory tree... "
if (make install >$OUT); then
    echo "[Success]"
else
    echo "[Error] Check make error messages"
fi



# Install
echo ""
echo "=== Installing P4 in your system..."
if [[ $installed_root = true ]]; then
    read_variable 'no' '- Do you want to install P4 in $HOME/p4?'
    if (echo "$input_variable" | grep -iq "^y"); then
        install_home
    fi
elif [[ $installed_home = true ]]; then
    read_variable 'no' '- Do you want to install P4 in /usr/local/p4?'
    if (echo "$input_variable" | grep -iq "^y"); then
        install_root
    fi
else
    while : ; do
        echo "- Where do you want to install P4 in your system?"
        echo "    1: /usr/local/p4"
        echo "    2: $HOME/p4"
        echo "    3: cancel"
        printf "Selection: "
        read_variable
        if [[ "$input_variable" == '1' ]]; then
            install_root
            break
        elif [[ "$input_variable" == '2' ]]; then 
            install_home
            break
        elif [[ "$input_variable" == '3' ]]; then
            echo "- Not installing"
            break
        else
            echo "- Invalid selection"
        fi
    done
fi
echo ""
echo "=== Finished."
