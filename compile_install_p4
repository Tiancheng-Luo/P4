#!/bin/bash

#  This file is part of P4
# 
#  Copyright (C) 1996-2017  J.C. Art√©s, P. De Maesschalck, F. Dumortier,
#                           C. Herssens, J. Llibre, O. Saleta, J. Torregrosa
# 
#  P4 is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Lesser General Public License as published
#  by the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
# 
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
# 
#  You should have received a copy of the GNU Lesser General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e

clear


# Check OS
platform='unknown'
unamestr=`uname`
if [[ "$unamestr" == 'Linux' ]]; then
    platform='linux'
elif [[ "$unamestr" == 'Darwin' ]]; then
    platform='darwin'
else
    echo "- This script only works in Linux and macOS systems, aborting."
    exit 1
fi

# Check qmake command
if [[ -z ${QMAKE+x} ]]; then
    QMAKE='qmake'
fi


# Functions
function print_title {
    if [[ "$1" == 'install' ]]; then
        printf "\n\t______    ___     _              _           _  _             \n\t| ___ \  /   |   (_)            | |         | || |            \n\t| |_/ / / /| |    _  _ __   ___ | |_   __ _ | || |  ___  _ __ \n\t|  __/ / /_| |   | || '_ \ / __|| __| / _\` || || | / _ \| '__|\n\t| |    \___  |   | || | | |\__ \| |_ | (_| || || ||  __/| |   \n\t\_|        |_/   |_||_| |_||___/ \__| \__,_||_||_| \___||_|   \n\n"
    elif [[ "$1" == 'uninstall' ]]; then
        printf "\n\t______    ___                   _              _           _  _             \n\t| ___ \  /   |                 (_)            | |         | || |            \n\t| |_/ / / /| |    _   _  _ __   _  _ __   ___ | |_   __ _ | || |  ___  _ __ \n\t|  __/ / /_| |   | | | || '_ \ | || '_ \ / __|| __| / _\` || || | / _ \| '__|\n\t| |    \___  |   | |_| || | | || || | | |\__ \| |_ | (_| || || ||  __/| |   \n\t\_|        |_/    \__,_||_| |_||_||_| |_||___/ \__| \__,_||_||_| \___||_|   \n\n"
    fi
}


function install_home {
    printf "== Installing P4 in $HOME/p4...\n"
    mv p4 $HOME/
    installdir=$HOME/p4
    ln -s $installdir/sumtables $installdir/sum_tables
    printf "Compilation and installation is finished. Now, it is advisable that you add the following lines to the end of the configuration file of your preferred shell (probably $HOME/.${SHELL:5}rc):\n\tP4_DIR=$installdir \n\tPATH=$installdir/bin:\$PATH\nexport P4_DIR PATH \n\nIn case you don't know which shell you're using, open a terminal and execute this command:\n\techo .\$(echo \$0)rc\nAnd edit that file."
}

function install_root {
    printf "\n=== Installing P4 in /usr/local/p4...\n"
    sudo mv p4 /usr/local
    installdir=/usr/local/p4
    sudo ln -s $installdir/sumtables $installdir/sum_tables
    sudo ln -s $installdir/bin/p4 /usr/local/bin/p4
    printf "Compilation and installation is finished. Now, it is advisable that you add the following lines to the end of the configuration file of your preferred shell (probably $HOME/.${SHELL:5}rc): \n\tP4_DIR=$installdir \n\texport P4_DIR \n\nIn case you don't know which shell you're using, open a terminal and execute this command:\n\techo .\$(echo \$0)rc\nAnd edit that file."
}

function mpfr_test {
    echo "- Looking for multiprecision library..."
    printf "#include <mpfr.h>\nint main(void) {\nreturn 0;\n}" > testmpfr.cpp
    if [ "$platform" == 'linux' ]; then
        if (! g++ testmpfr.cpp 1>/dev/null 2>&1); then
            echo "$mpfr_error"
            rm testmpfr.cpp
            exit 1
        fi
    elif [ "$platform" == 'darwin' ]; then
        if (! clang testmpfr.cpp 1>/dev/null 2>&1); then
            echo "$mpfr_error"
            rm testmpfr.cpp
            exit 1
        fi
    fi
    echo "[Success]"
    rm testmpfr.cpp
    rm a.out
}

if [[ "$platform" == 'darwin' ]]; then
    function qt_install {
        printf -- "- This script can automatically install Qt in your system using Brew. Do you want to install Qt using Homebrew? [Y/n] "
        read input_variable
        if (echo "$input_variable" | grep -iq "^y"); then
            printf -- "\t- Not installing Qt, this script will abort now."
            exit 1
        else 
            $(/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)")
            $(brew install qt)
        fi
    }
fi

# Error messages
maple_error="\n[Error] Maple was not found in the system.\n\tIt is needed by P4 to perform many computations, so P4 will not really work without it."
if [ "$platform" == 'linux' ]; then
    qt5_error="\n[Error] Some Qt5 modules were not found in the system.\n\tInstall them using the proper method for your distribution, e.g.:\n\t\t- Debian-based (Debian/Ubuntu/Mint): sudo apt-get install qt5-default qt5-qmake\n\t\t- Fedora-based (Fedora/Kokora/Arquetype): sudo dnf install qt5*-devel --allowerasing\n\t\t- Arch-based (Archlinux/Antergos): sudo pacman -S qt5-base\n"
    pkgconfig_error="\n[Error] The command pkg-config is required in order to check for other needed packages.\n\tInstall it using the proper method for your distribution, e.g.:\n\t\t- Debian-based (Debian/Ubuntu/Mint): sudo apt-get install pkg-config\n\t\t- Fedora-based (Fedora/Kokora/Arquetype): sudo dnf install pkgconfig\n\t\t- Arch-based (Archlinux/Angergos): sudo pacman -S pkg-config\n"
    compiler_error="\n[Error] GCC is required to compile P4, and some libraries were not found in the system.\n\tInstall them using the proper method for your distribution, e.g.:\n\t\t- Debian-based (Debian/Ubuntu/Mint): sudo apt-get install gcc g++\n\t\t- Fedora-based (Fedora/Kokora/Arquetype): sudo dnf group install 'Development Tools'\n\t\t- Arch-based (Archlinux/Antergos): sudo pacman -S gcc\n"
    ldconfig_error="\n[Error] Cannot execute command ldconfig, make sure it is available and you have permission to use this command.\n"
    mpfr_error="\n[Error] Multiprecision mpfr library was not found in the system. Install it using the proper method for your distribution, e.g.:\n\t- Debian-based (Debian/Ubuntu/Mint): sudo apt-get install libmpfr-dev\n\t\t- Fedora-based (Fedora/Kokora/Arquetype): sudo dnf install mpfr-devel\n\t\t- Arch-based (Archlinux/Antergos): sudo pacman -S mpfr\n"
    qmake_error="\n[Error] $QMAKE is not a valid command for building a Qt application.\n\tPossible causes are that Qt5 is not properly installed:\n\t- Debian-based (Debian/Ubuntu/Mint): sudo apt install qt5-default qt5-qmake\n\t\t- Fedora-based (Fedora/Kokora/Arquetype): sudo dnf install qt5*-devel --allowerasing\n\t\t- Arch-based (Archlinux/Antergos): sudo pacman -S qt5-base\n\tor that your Linux distribution uses a different name for the qmake executable (e.g. in Fedora-based distributions, it is called qmake-qt5). In this case, run\n\t\tenv QMAKE=/path/to/qmake ./compile_install_p4 --verbose\n\t(where /path/to/qmake should be replaced by the actual path of qmake in your system).\n"
elif [ "$platform" == 'darwin' ]; then
    qt5_error="\n[Error] Some Qt5 modules were not found in the system.\n\tInstall or compile Qt following instructions from http://doc.qt.io/qt-5/osx.html.\n"
    pkgconfig_error="\n[Error] pkg-config is needed in order to check for other packages.\n\tInstall it using this command in a terminal: brew install pkg-config.\n"
    compiler_error="\n[Error] Clang is required to compile P4, and it was not found in the system.\n\tInstall Xcode and then install the command-line tools using: xcode-select --install in a terminal.\n"
    mpfr_error="\n[Error] Multiprecision mpfr library was not found in the system. You can install it using this command in a terminal: brew install mpfr\n"
    qmake_error="\n[Error] $QMAKE is not a valid command for building a Qt application.\n\tA possible cause is that Qt is not properly installed: in this case, install Qt following the instructions of http://doc.qt.io/qt-5/osx.html.\n\tAnother cause can be that the binary was not found. In this case, run the script as:\n\t\tenv QMAKE=/path/to/qmake ./compile_install_p4 --verbose\n\t(where /path/to/qmake should be replaced by the actual path of qmake in your system).\n"
fi


# Check input variables
if [ "$1" = "--verbose" ] || [ "$2" = "--verbose" ] || [ "$3" = "--verbose" ]; then
    verbose=true
else
    verbose=false
fi
if [ "$1" = "--uninstall" ] || [ "$2" = "--uninstall" ] || [ "$3" = "--uninstall" ]; then
    only_uninstall=true
else
    only_uninstall=false
fi
if [ "$1" = "--debug" ] || [ "$2" = "--debug" ] || [ "$3" = "--debug" ]; then
    compile_debug="CONFIG+=debug"
else
    compile_debug=
fi


# Title
if [ $only_uninstall = false ]; then
    print_title 'install'
    # Welcome screen
    printf "\nWelcome to the P4 compilation and installation script.\n\nOptional arguments:\n\t--verbose: more verbose output (in order to see possible errors during compilation)\n\t--uninstall: to uninstall P4\n\t--debug: to compile with debugging symbols\nThese options can be used together in any given order.\n\nDo you want to continue with the execution of the script? [Y/n] "
    read input_variable
    if (echo "$input_variable" | grep -iq "^n"); then
        printf "\n=== Finished\n\n"
        exit 0
    fi
else
    print_title 'uninstall'
    printf "\nWelcome to the P4 uninstaller script.\n\nYou are about to uninstall P4 from your system. You will be asked for confirmation before completely removing P4.\n\nContinue with the execution of the script? [Y/n] "
    read input_variable
    if (echo "$input_variable" | grep -iq "^n"); then
        printf "\n=== Finished\n\n"
        exit 0
    fi
fi

# Uninstalling
printf "\n=== Checking for older P4 versions...\n"
uninstalled=false
installed_home=false
installed_root=false
if [[ -d $HOME/p4 ]]; then
    installed_home=true
    printf "- P4 installation found in $HOME/p4. Do you want to remove it? [Y/n] "
    read input_variable
    if (echo "$input_variable" | grep -iq "^n"); then
        echo "- Not removing P4 in $HOME/p4"
    else
        uninstalled=true
        installed_home=false
        rm -rf $HOME/p4
        if [[ "$platform" == 'linux' ]]; then
            if [[ -f $HOME/.local/share/applications/p4.desktop ]]; then
                rm -f $HOME/.local/share/applications/p4.desktop
            fi
        fi
    fi
fi
if [[ -d /usr/local/p4 ]]; then
    installed_root=true
    printf -- "- P4 installation found in /usr/local/p4. Do you want to remove it? [Y/n] "
    read input_variable
    if (echo "$input_variable" | grep -iq "^n"); then
        echo "- Not removing P4 in /usr/local/p4"
    else
        uninstalled=true
        installed_root=false
        sudo rm -rf /usr/local/p4
        sudo rm -f /usr/local/bin/p4
        if [[ "$platform" == 'linux' ]]; then
            if [[ -f /usr/share/applications/p4.desktop ]]; then
                sudo rm -f /usr/share/applications/p4.desktop
            fi
        fi
    fi
fi

if [[ $uninstalled = false ]]; then
    echo "- No older P4 version removed."
fi
if [ $uninstalled = true ]; then
    if [[ -d $HOME/.config/P4 ]]; then
        printf "= Do you want to remove P4 configuration? [y/N] "
        read input_variable
        if (echo "$input_variable" | grep -iq "^y"); then
            rm -rf $HOME/.config/P4
        fi
    fi
fi


# After uninstalling, check if we want to continue
if [ $only_uninstall = true ]; then
    exit 0
fi

# Check for dependencies
printf "\n=== Checking for dependencies...\n"
# qmake
echo "- Looking for qmake... "
if (command -v qmake >/dev/null 2>&1); then
    echo "[Success]"
else
    printf "$qmake_error"
    if [[ "$platform" == 'linux' ]]; then
        exit 1
    elif [[ "$platform" == 'darwin' ]]; then
        qt_install
    fi
fi

if [[ "$platform" == 'linux' ]]; then
    # Qt modules
    echo "- Looking for pkg-config... "
    if (command -v pkg-config >/dev/null 2>&1); then
        echo "[Success]"
        echo "- Looking for Qt5 modules... "
        if (pkg-config --exists Qt5Core && pkg-config --exists Qt5Gui && pkg-config --exists Qt5Widgets && pkg-config --exists Qt5PrintSupport); then
            echo "[Success]"
        else
            printf "$qt5_error"
            exit 1
        fi
    else
        printf "$pkgconfig_error"
        exit 1
    fi
    # compiler libraries
    echo "- Looking for ldconfig... "
    if (command -v ldconfig >/dev/null 2>&1); then
        echo "[Success]"
        echo "- Looking for compiler libraries... "
        if (ldconfig -p | grep libstdc++ >/dev/null && ldconfig -p | grep libgcc_s >/dev/null && ldconfig -p | grep libc >/dev/null); then
            echo "[Success]"
        else
            printf "$compiler_error"
            exit 1
        fi
    else
        printf "[Warning] ldconfig could not be executed, trying as super user... "
        if (sudo ldconfig -p | grep libstdc++ >/dev/null && sudo ldconfig -p | grep libgcc_s >/dev/null && sudo ldconfig -p | grep libc >/dev/null); then
            echo "[Success]"
        else
            printf "$ldconfig_error"
            exit 1
        fi
    fi
fi

# multiprecision
mpfr_test

# maple
echo "- Looking for Maple... "
if (command -v maple >/dev/null 2>&1); then
    echo "[Success]"
else
    printf "$maple_error"
fi




# Compile
printf "\n=== Compiling P4...\n"
echo "== Cleaning old builds..."
if [[ $verbose = false ]]; then
    OUT=/dev/null
    ERR=/dev/null
else
    OUT=/dev/stdout
    ERR=/dev/stderr
fi
rm -rf build p4
echo "== Executing qmake..."
if (! $QMAKE $compile_debug -r P4.pro >$OUT 2>$ERR); then
    echo "- qmake error" # TODO: check if this looks ugly
    printf "$qmake_error"
    exit 1
fi
# Use multicore make for faster compilation
#echo "- Cleaning previous compilations..."
#make clean >$OUT 2>$ERR
if [[ "$platform" == 'linux' ]]; then
    CPUCNT=$(grep -c ^processor /proc/cpuinfo)
elif [[ "$platform" == 'darwin' ]]; then
    CPUCNT=$(sysctl -a | grep ^machdep.cpu.thread_count: | sed 's/^.*: //')
fi
echo "== Compiling C++ code... "
printf -- "- Will use $CPUCNT jobs for make. This will take a moment... "
if (make -j$CPUCNT >$OUT); then
    echo "[Success]"
else
    echo "[Error] Check make log"
    exit 1
fi
echo "== Compiling Maple code... "
if [[ -f src-mpl/p4.m ]]; then
    printf -- "- Do you want to recompile Maple scripts from src-mpl? If your Maple version is Maple 2015, this is not necessary. [y/N] "
    read input_variable
    if (echo "$input_variable" | grep -iq "^y"); then
        printf -- "- Recompiling Maple scripts..."
        cd src-mpl
        make -f MakeTexMaple clean >$OUT 2>$ERR #TODO: check makefile for mac compatibility
        cd ..
        if (make -C src-mpl p4.m >$OUT 2>$ERR); then
            echo "[Success]"
        else
            echo "[Error] Check make log"
            exit 1
        fi
    fi
else
    printf -- "- Compiling Maple scripts... "
    if (make -C src-mpl p4.m >$OUT 2>$ERR); then
        echo "[Success]"
    else
        echo "[Error] Check make log"
        exit 1
    fi
fi


# make install (generate p4 directory in project root)
printf "\n=== Generating P4 directory tree... "
if (make install >$OUT 2>$ERR); then
    echo "[Success]"
else
    echo "[Error] Check make log"
fi



# Install
printf "\n=== Installing P4 in your system...\n"
if [[ $installed_root = true ]]; then
    printf -- "- Do you want to install P4 in $HOME/p4? [y/N]"
    read input_variable
    if (echo "$input_variable" | grep -iq "^y"); then
        install_home
    fi
elif [[ $installed_home = true ]]; then
    printf -- "- Do you want to install P4 in /usr/local/p4? [y/N]"
    read input_variable
    if (echo "$input_variable" | grep -iq "^y"); then
        install_root
    fi
else
    while : ; do
        printf -- "- Where do you want to install P4 in your system?\n\t0: /usr/local/p4\n\t1: $HOME/p4\n\t2: cancel\nSelection: "
        read input_variable
        if [[ "$input_variable" == '0' ]]; then
            install_root
            break
        elif [[ "$input_variable" == '1' ]]; then 
            install_home
            break
        elif [[ "$input_variable" == '2' ]]; then
            echo "- Not installing"
            break
        else
            echo "- Invalid selection"
        fi
    done
fi
printf "\n=== Finished.\n"